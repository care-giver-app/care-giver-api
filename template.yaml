AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  care-giver-api

  Sample SAM Template for care-giver-api

Parameters:
  Env:
    Type: String
  UserPool:
    Type: String
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    MemorySize: 128

    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
Resources:
  CareGiverAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors: "'*'"
      Auth:
        DefaultAuthorizer: CareGiverAPIAuthorizer
        Authorizers:
          CareGiverAPIAuthorizer:
            UserPoolArn: !Ref UserPool
            AuthorizationScopes:
              - 'aws.cognito.signin.user.admin'
  CareGiverAPIDynamoPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub DynamoDBCareGiverUsers-${Env}
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - dynamodb:BatchGetItem
          - dynamodb:BatchWriteItem
          - dynamodb:ConditionCheckItem
          - dynamodb:PutItem
          - dynamodb:DescribeTable
          - dynamodb:DeleteItem
          - dynamodb:GetItem
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:UpdateItem
          Resource: 
          - !Sub arn:aws:dynamodb:${AWS::Region}:658340567265:table/user-table-${Env}
          - !Sub arn:aws:dynamodb:${AWS::Region}:658340567265:table/receiver-table-${Env}
          - !Sub arn:aws:dynamodb:${AWS::Region}:658340567265:table/event-table-${Env}
      Roles:
      - Ref: CareGiverAPIRole
    Metadata:
      SamResourceId: CareGiverAPIPolicy
  CareGiverAPIRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub CareGiverAPIRole-${Env}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      SamResourceId: CareGiverAPIRole
  CareGiverAPIFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Metadata:
      BuildMethod: go1.x
      SamResourceId: CareGiverAPIFunction
    Properties:
      FunctionName: !Sub care-giver-api-${Env}
      Role: !GetAtt CareGiverAPIRole.Arn
      CodeUri: function.zip
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
      - x86_64
      Events:
        AddUser:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref CareGiverAPI
            Path: /user
            Method: POST
            Auth:
              Authorizer: NONE
        GetUser:
          Type: Api
          Properties:
            RestApiId: !Ref CareGiverAPI
            Path: /user/{userId}
            Method: GET
        AddPrimaryReceiver:
          Type: Api
          Properties:
            RestApiId: !Ref CareGiverAPI
            Path: /user/primary-receiver
            Method: POST
        AddAdditionalReceiver:
          Type: Api
          Properties:
            RestApiId: !Ref CareGiverAPI
            Path: /user/additional-receiver
            Method: POST
        GetReceiver:
          Type: Api
          Properties:
            RestApiId: !Ref CareGiverAPI
            Path: /receiver/{receiverId}
            Method: GET
        AddReceiverEvent:
          Type: Api
          Properties:
            RestApiId: !Ref CareGiverAPI
            Path: /event
            Method: POST
        GetReceiverEvents:
          Type: Api
          Properties:
            RestApiId: !Ref CareGiverAPI
            Path: /events/{receiverId}
            Method: GET
            RequestParameters:
              - method.request.querystring.userId:
                  Required: true
        GetReceiverEvent:
          Type: Api
          Properties:
            RestApiId: !Ref CareGiverAPI
            Path: /event/{eventId}
            Method: GET
            RequestParameters:
              - method.request.querystring.receiverId:
                  Required: true
              - method.request.querystring.userId:
                  Required: true
        DeleteReceiverEvent:
          Type: Api
          Properties:
            RestApiId: !Ref CareGiverAPI
            Path: /event/{eventId}
            Method: DELETE
            RequestParameters:
              - method.request.querystring.receiverId:
                  Required: true
              - method.request.querystring.userId:
                  Required: true
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          ENV: !Ref Env
          USER_TABLE_NAME: !Sub user-table-${Env}
          RECEIVER_TABLE_NAME: !Sub receiver-table-${Env}
          EVENT_TABLE_NAME: !Sub event-table-${Env}

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name: !Sub ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
Outputs:
  CareGiverAPI:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${CareGiverAPI}.execute-api.${AWS::Region}.amazonaws.com/${Env}/"
  CareGiverAPIFunction:
    Description: Function ARN
    Value: !GetAtt CareGiverAPIFunction.Arn
  CareGiverAPIFunctionIamRole:
    Description: Implicit IAM Role created
    Value: !GetAtt CareGiverAPIFunction.Arn
